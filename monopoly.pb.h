// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monopoly.proto

#ifndef PROTOBUF_monopoly_2eproto__INCLUDED
#define PROTOBUF_monopoly_2eproto__INCLUDED

#include <string>

//#include "google/protobuf/stubs/common.h"
#include "google\protobuf\stubs\common.h"

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace monopoly {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_monopoly_2eproto();
void protobuf_AssignDesc_monopoly_2eproto();
void protobuf_ShutdownFile_monopoly_2eproto();

class BuyableGrid;
class AllBuyableGrids;

// ===================================================================

class BuyableGrid : public ::google::protobuf::Message {
 public:
  BuyableGrid();
  virtual ~BuyableGrid();

  BuyableGrid(const BuyableGrid& from);

  inline BuyableGrid& operator=(const BuyableGrid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyableGrid& default_instance();

  void Swap(BuyableGrid* other);

  // implements Message ----------------------------------------------

  BuyableGrid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyableGrid& from);
  void MergeFrom(const BuyableGrid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 price = 2;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // required int32 rent = 3;
  inline bool has_rent() const;
  inline void clear_rent();
  static const int kRentFieldNumber = 3;
  inline ::google::protobuf::int32 rent() const;
  inline void set_rent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:monopoly.BuyableGrid)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_rent();
  inline void clear_has_rent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 rent_;
  friend void  protobuf_AddDesc_monopoly_2eproto();
  friend void protobuf_AssignDesc_monopoly_2eproto();
  friend void protobuf_ShutdownFile_monopoly_2eproto();

  void InitAsDefaultInstance();
  static BuyableGrid* default_instance_;
};
// -------------------------------------------------------------------

class AllBuyableGrids : public ::google::protobuf::Message {
 public:
  AllBuyableGrids();
  virtual ~AllBuyableGrids();

  AllBuyableGrids(const AllBuyableGrids& from);

  inline AllBuyableGrids& operator=(const AllBuyableGrids& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllBuyableGrids& default_instance();

  void Swap(AllBuyableGrids* other);

  // implements Message ----------------------------------------------

  AllBuyableGrids* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllBuyableGrids& from);
  void MergeFrom(const AllBuyableGrids& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .monopoly.BuyableGrid property = 1;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 1;
  inline const ::monopoly::BuyableGrid& property(int index) const;
  inline ::monopoly::BuyableGrid* mutable_property(int index);
  inline ::monopoly::BuyableGrid* add_property();
  inline const ::google::protobuf::RepeatedPtrField< ::monopoly::BuyableGrid >&
      property() const;
  inline ::google::protobuf::RepeatedPtrField< ::monopoly::BuyableGrid >*
      mutable_property();

  // @@protoc_insertion_point(class_scope:monopoly.AllBuyableGrids)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::monopoly::BuyableGrid > property_;
  friend void  protobuf_AddDesc_monopoly_2eproto();
  friend void protobuf_AssignDesc_monopoly_2eproto();
  friend void protobuf_ShutdownFile_monopoly_2eproto();

  void InitAsDefaultInstance();
  static AllBuyableGrids* default_instance_;
};
// ===================================================================


// ===================================================================

// BuyableGrid

// required string name = 1;
inline bool BuyableGrid::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyableGrid::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyableGrid::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyableGrid::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BuyableGrid::name() const {
  // @@protoc_insertion_point(field_get:monopoly.BuyableGrid.name)
  return *name_;
}
inline void BuyableGrid::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:monopoly.BuyableGrid.name)
}
inline void BuyableGrid::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:monopoly.BuyableGrid.name)
}
inline void BuyableGrid::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:monopoly.BuyableGrid.name)
}
inline ::std::string* BuyableGrid::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:monopoly.BuyableGrid.name)
  return name_;
}
inline ::std::string* BuyableGrid::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BuyableGrid::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:monopoly.BuyableGrid.name)
}

// required int32 price = 2;
inline bool BuyableGrid::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyableGrid::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyableGrid::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyableGrid::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 BuyableGrid::price() const {
  // @@protoc_insertion_point(field_get:monopoly.BuyableGrid.price)
  return price_;
}
inline void BuyableGrid::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:monopoly.BuyableGrid.price)
}

// required int32 rent = 3;
inline bool BuyableGrid::has_rent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuyableGrid::set_has_rent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuyableGrid::clear_has_rent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuyableGrid::clear_rent() {
  rent_ = 0;
  clear_has_rent();
}
inline ::google::protobuf::int32 BuyableGrid::rent() const {
  // @@protoc_insertion_point(field_get:monopoly.BuyableGrid.rent)
  return rent_;
}
inline void BuyableGrid::set_rent(::google::protobuf::int32 value) {
  set_has_rent();
  rent_ = value;
  // @@protoc_insertion_point(field_set:monopoly.BuyableGrid.rent)
}

// -------------------------------------------------------------------

// AllBuyableGrids

// repeated .monopoly.BuyableGrid property = 1;
inline int AllBuyableGrids::property_size() const {
  return property_.size();
}
inline void AllBuyableGrids::clear_property() {
  property_.Clear();
}
inline const ::monopoly::BuyableGrid& AllBuyableGrids::property(int index) const {
  // @@protoc_insertion_point(field_get:monopoly.AllBuyableGrids.property)
  return property_.Get(index);
}
inline ::monopoly::BuyableGrid* AllBuyableGrids::mutable_property(int index) {
  // @@protoc_insertion_point(field_mutable:monopoly.AllBuyableGrids.property)
  return property_.Mutable(index);
}
inline ::monopoly::BuyableGrid* AllBuyableGrids::add_property() {
  // @@protoc_insertion_point(field_add:monopoly.AllBuyableGrids.property)
  return property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::monopoly::BuyableGrid >&
AllBuyableGrids::property() const {
  // @@protoc_insertion_point(field_list:monopoly.AllBuyableGrids.property)
  return property_;
}
inline ::google::protobuf::RepeatedPtrField< ::monopoly::BuyableGrid >*
AllBuyableGrids::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:monopoly.AllBuyableGrids.property)
  return &property_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace monopoly

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_monopoly_2eproto__INCLUDED

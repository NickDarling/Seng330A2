// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monopoly.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "monopoly.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace monopoly {

namespace {

const ::google::protobuf::Descriptor* BuyableGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyableGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllBuyableGrids_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllBuyableGrids_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_monopoly_2eproto() {
  protobuf_AddDesc_monopoly_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "monopoly.proto");
  GOOGLE_CHECK(file != NULL);
  BuyableGrid_descriptor_ = file->message_type(0);
  static const int BuyableGrid_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyableGrid, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyableGrid, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyableGrid, rent_),
  };
  BuyableGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyableGrid_descriptor_,
      BuyableGrid::default_instance_,
      BuyableGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyableGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyableGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyableGrid));
  AllBuyableGrids_descriptor_ = file->message_type(1);
  static const int AllBuyableGrids_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllBuyableGrids, property_),
  };
  AllBuyableGrids_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllBuyableGrids_descriptor_,
      AllBuyableGrids::default_instance_,
      AllBuyableGrids_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllBuyableGrids, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllBuyableGrids, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllBuyableGrids));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_monopoly_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyableGrid_descriptor_, &BuyableGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllBuyableGrids_descriptor_, &AllBuyableGrids::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_monopoly_2eproto() {
  delete BuyableGrid::default_instance_;
  delete BuyableGrid_reflection_;
  delete AllBuyableGrids::default_instance_;
  delete AllBuyableGrids_reflection_;
}

void protobuf_AddDesc_monopoly_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016monopoly.proto\022\010monopoly\"8\n\013BuyableGri"
    "d\022\014\n\004name\030\001 \002(\t\022\r\n\005price\030\002 \002(\005\022\014\n\004rent\030\003"
    " \002(\005\":\n\017AllBuyableGrids\022\'\n\010property\030\001 \003("
    "\0132\025.monopoly.BuyableGrid", 144);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "monopoly.proto", &protobuf_RegisterTypes);
  BuyableGrid::default_instance_ = new BuyableGrid();
  AllBuyableGrids::default_instance_ = new AllBuyableGrids();
  BuyableGrid::default_instance_->InitAsDefaultInstance();
  AllBuyableGrids::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_monopoly_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_monopoly_2eproto {
  StaticDescriptorInitializer_monopoly_2eproto() {
    protobuf_AddDesc_monopoly_2eproto();
  }
} static_descriptor_initializer_monopoly_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BuyableGrid::kNameFieldNumber;
const int BuyableGrid::kPriceFieldNumber;
const int BuyableGrid::kRentFieldNumber;
#endif  // !_MSC_VER

BuyableGrid::BuyableGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:monopoly.BuyableGrid)
}

void BuyableGrid::InitAsDefaultInstance() {
}

BuyableGrid::BuyableGrid(const BuyableGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:monopoly.BuyableGrid)
}

void BuyableGrid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  rent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyableGrid::~BuyableGrid() {
  // @@protoc_insertion_point(destructor:monopoly.BuyableGrid)
  SharedDtor();
}

void BuyableGrid::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BuyableGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyableGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyableGrid_descriptor_;
}

const BuyableGrid& BuyableGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monopoly_2eproto();
  return *default_instance_;
}

BuyableGrid* BuyableGrid::default_instance_ = NULL;

BuyableGrid* BuyableGrid::New() const {
  return new BuyableGrid;
}

void BuyableGrid::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuyableGrid*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(price_, rent_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyableGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:monopoly.BuyableGrid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // required int32 price = 2;
      case 2: {
        if (tag == 16) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rent;
        break;
      }

      // required int32 rent = 3;
      case 3: {
        if (tag == 24) {
         parse_rent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rent_)));
          set_has_rent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:monopoly.BuyableGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:monopoly.BuyableGrid)
  return false;
#undef DO_
}

void BuyableGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:monopoly.BuyableGrid)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // required int32 rent = 3;
  if (has_rent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:monopoly.BuyableGrid)
}

::google::protobuf::uint8* BuyableGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:monopoly.BuyableGrid)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // required int32 rent = 3;
  if (has_rent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monopoly.BuyableGrid)
  return target;
}

int BuyableGrid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // required int32 rent = 3;
    if (has_rent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyableGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyableGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyableGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyableGrid::MergeFrom(const BuyableGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_rent()) {
      set_rent(from.rent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyableGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyableGrid::CopyFrom(const BuyableGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyableGrid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BuyableGrid::Swap(BuyableGrid* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(price_, other->price_);
    std::swap(rent_, other->rent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyableGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyableGrid_descriptor_;
  metadata.reflection = BuyableGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllBuyableGrids::kPropertyFieldNumber;
#endif  // !_MSC_VER

AllBuyableGrids::AllBuyableGrids()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:monopoly.AllBuyableGrids)
}

void AllBuyableGrids::InitAsDefaultInstance() {
}

AllBuyableGrids::AllBuyableGrids(const AllBuyableGrids& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:monopoly.AllBuyableGrids)
}

void AllBuyableGrids::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllBuyableGrids::~AllBuyableGrids() {
  // @@protoc_insertion_point(destructor:monopoly.AllBuyableGrids)
  SharedDtor();
}

void AllBuyableGrids::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllBuyableGrids::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllBuyableGrids::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllBuyableGrids_descriptor_;
}

const AllBuyableGrids& AllBuyableGrids::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monopoly_2eproto();
  return *default_instance_;
}

AllBuyableGrids* AllBuyableGrids::default_instance_ = NULL;

AllBuyableGrids* AllBuyableGrids::New() const {
  return new AllBuyableGrids;
}

void AllBuyableGrids::Clear() {
  property_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllBuyableGrids::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:monopoly.AllBuyableGrids)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .monopoly.BuyableGrid property = 1;
      case 1: {
        if (tag == 10) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_property;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:monopoly.AllBuyableGrids)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:monopoly.AllBuyableGrids)
  return false;
#undef DO_
}

void AllBuyableGrids::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:monopoly.AllBuyableGrids)
  // repeated .monopoly.BuyableGrid property = 1;
  for (int i = 0; i < this->property_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->property(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:monopoly.AllBuyableGrids)
}

::google::protobuf::uint8* AllBuyableGrids::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:monopoly.AllBuyableGrids)
  // repeated .monopoly.BuyableGrid property = 1;
  for (int i = 0; i < this->property_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->property(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monopoly.AllBuyableGrids)
  return target;
}

int AllBuyableGrids::ByteSize() const {
  int total_size = 0;

  // repeated .monopoly.BuyableGrid property = 1;
  total_size += 1 * this->property_size();
  for (int i = 0; i < this->property_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllBuyableGrids::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllBuyableGrids* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllBuyableGrids*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllBuyableGrids::MergeFrom(const AllBuyableGrids& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_.MergeFrom(from.property_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllBuyableGrids::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllBuyableGrids::CopyFrom(const AllBuyableGrids& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllBuyableGrids::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->property())) return false;
  return true;
}

void AllBuyableGrids::Swap(AllBuyableGrids* other) {
  if (other != this) {
    property_.Swap(&other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllBuyableGrids::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllBuyableGrids_descriptor_;
  metadata.reflection = AllBuyableGrids_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace monopoly

// @@protoc_insertion_point(global_scope)
